// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/01/2015 17:19:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    registerarray
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module registerarray_vlg_sample_tst(
	WriteEnable,
	clock,
	clock_debug,
	read_address_1,
	read_address_2,
	read_address_debug,
	reset,
	write,
	write_address,
	write_data_in,
	sampler_tx
);
input  WriteEnable;
input  clock;
input  clock_debug;
input [4:0] read_address_1;
input [4:0] read_address_2;
input [4:0] read_address_debug;
input  reset;
input  write;
input [4:0] write_address;
input [31:0] write_data_in;
output sampler_tx;

reg sample;
time current_time;
always @(WriteEnable or clock or clock_debug or read_address_1 or read_address_2 or read_address_debug or reset or write or write_address or write_data_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module registerarray_vlg_check_tst (
	data_out_1,
	data_out_2,
	data_out_debug,
	sampler_rx
);
input [31:0] data_out_1;
input [31:0] data_out_2;
input [31:0] data_out_debug;
input sampler_rx;

reg [31:0] data_out_1_expected;
reg [31:0] data_out_2_expected;
reg [31:0] data_out_debug_expected;

reg [31:0] data_out_1_prev;
reg [31:0] data_out_2_prev;
reg [31:0] data_out_debug_prev;

reg [31:0] data_out_1_expected_prev;
reg [31:0] data_out_2_expected_prev;
reg [31:0] data_out_debug_expected_prev;

reg [31:0] last_data_out_1_exp;
reg [31:0] last_data_out_2_exp;
reg [31:0] last_data_out_debug_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_1_prev = data_out_1;
	data_out_2_prev = data_out_2;
	data_out_debug_prev = data_out_debug;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_1_expected_prev = data_out_1_expected;
	data_out_2_expected_prev = data_out_2_expected;
	data_out_debug_expected_prev = data_out_debug_expected;
end


// expected data_out_1[ 31 ]
initial
begin
	data_out_1_expected[31] = 1'bX;
end 
// expected data_out_1[ 30 ]
initial
begin
	data_out_1_expected[30] = 1'bX;
end 
// expected data_out_1[ 29 ]
initial
begin
	data_out_1_expected[29] = 1'bX;
end 
// expected data_out_1[ 28 ]
initial
begin
	data_out_1_expected[28] = 1'bX;
end 
// expected data_out_1[ 27 ]
initial
begin
	data_out_1_expected[27] = 1'bX;
end 
// expected data_out_1[ 26 ]
initial
begin
	data_out_1_expected[26] = 1'bX;
end 
// expected data_out_1[ 25 ]
initial
begin
	data_out_1_expected[25] = 1'bX;
end 
// expected data_out_1[ 24 ]
initial
begin
	data_out_1_expected[24] = 1'bX;
end 
// expected data_out_1[ 23 ]
initial
begin
	data_out_1_expected[23] = 1'bX;
end 
// expected data_out_1[ 22 ]
initial
begin
	data_out_1_expected[22] = 1'bX;
end 
// expected data_out_1[ 21 ]
initial
begin
	data_out_1_expected[21] = 1'bX;
end 
// expected data_out_1[ 20 ]
initial
begin
	data_out_1_expected[20] = 1'bX;
end 
// expected data_out_1[ 19 ]
initial
begin
	data_out_1_expected[19] = 1'bX;
end 
// expected data_out_1[ 18 ]
initial
begin
	data_out_1_expected[18] = 1'bX;
end 
// expected data_out_1[ 17 ]
initial
begin
	data_out_1_expected[17] = 1'bX;
end 
// expected data_out_1[ 16 ]
initial
begin
	data_out_1_expected[16] = 1'bX;
end 
// expected data_out_1[ 15 ]
initial
begin
	data_out_1_expected[15] = 1'bX;
end 
// expected data_out_1[ 14 ]
initial
begin
	data_out_1_expected[14] = 1'bX;
end 
// expected data_out_1[ 13 ]
initial
begin
	data_out_1_expected[13] = 1'bX;
end 
// expected data_out_1[ 12 ]
initial
begin
	data_out_1_expected[12] = 1'bX;
end 
// expected data_out_1[ 11 ]
initial
begin
	data_out_1_expected[11] = 1'bX;
end 
// expected data_out_1[ 10 ]
initial
begin
	data_out_1_expected[10] = 1'bX;
end 
// expected data_out_1[ 9 ]
initial
begin
	data_out_1_expected[9] = 1'bX;
end 
// expected data_out_1[ 8 ]
initial
begin
	data_out_1_expected[8] = 1'bX;
end 
// expected data_out_1[ 7 ]
initial
begin
	data_out_1_expected[7] = 1'bX;
end 
// expected data_out_1[ 6 ]
initial
begin
	data_out_1_expected[6] = 1'bX;
end 
// expected data_out_1[ 5 ]
initial
begin
	data_out_1_expected[5] = 1'bX;
end 
// expected data_out_1[ 4 ]
initial
begin
	data_out_1_expected[4] = 1'bX;
end 
// expected data_out_1[ 3 ]
initial
begin
	data_out_1_expected[3] = 1'bX;
end 
// expected data_out_1[ 2 ]
initial
begin
	data_out_1_expected[2] = 1'bX;
end 
// expected data_out_1[ 1 ]
initial
begin
	data_out_1_expected[1] = 1'bX;
end 
// expected data_out_1[ 0 ]
initial
begin
	data_out_1_expected[0] = 1'bX;
end 
// expected data_out_2[ 31 ]
initial
begin
	data_out_2_expected[31] = 1'bX;
end 
// expected data_out_2[ 30 ]
initial
begin
	data_out_2_expected[30] = 1'bX;
end 
// expected data_out_2[ 29 ]
initial
begin
	data_out_2_expected[29] = 1'bX;
end 
// expected data_out_2[ 28 ]
initial
begin
	data_out_2_expected[28] = 1'bX;
end 
// expected data_out_2[ 27 ]
initial
begin
	data_out_2_expected[27] = 1'bX;
end 
// expected data_out_2[ 26 ]
initial
begin
	data_out_2_expected[26] = 1'bX;
end 
// expected data_out_2[ 25 ]
initial
begin
	data_out_2_expected[25] = 1'bX;
end 
// expected data_out_2[ 24 ]
initial
begin
	data_out_2_expected[24] = 1'bX;
end 
// expected data_out_2[ 23 ]
initial
begin
	data_out_2_expected[23] = 1'bX;
end 
// expected data_out_2[ 22 ]
initial
begin
	data_out_2_expected[22] = 1'bX;
end 
// expected data_out_2[ 21 ]
initial
begin
	data_out_2_expected[21] = 1'bX;
end 
// expected data_out_2[ 20 ]
initial
begin
	data_out_2_expected[20] = 1'bX;
end 
// expected data_out_2[ 19 ]
initial
begin
	data_out_2_expected[19] = 1'bX;
end 
// expected data_out_2[ 18 ]
initial
begin
	data_out_2_expected[18] = 1'bX;
end 
// expected data_out_2[ 17 ]
initial
begin
	data_out_2_expected[17] = 1'bX;
end 
// expected data_out_2[ 16 ]
initial
begin
	data_out_2_expected[16] = 1'bX;
end 
// expected data_out_2[ 15 ]
initial
begin
	data_out_2_expected[15] = 1'bX;
end 
// expected data_out_2[ 14 ]
initial
begin
	data_out_2_expected[14] = 1'bX;
end 
// expected data_out_2[ 13 ]
initial
begin
	data_out_2_expected[13] = 1'bX;
end 
// expected data_out_2[ 12 ]
initial
begin
	data_out_2_expected[12] = 1'bX;
end 
// expected data_out_2[ 11 ]
initial
begin
	data_out_2_expected[11] = 1'bX;
end 
// expected data_out_2[ 10 ]
initial
begin
	data_out_2_expected[10] = 1'bX;
end 
// expected data_out_2[ 9 ]
initial
begin
	data_out_2_expected[9] = 1'bX;
end 
// expected data_out_2[ 8 ]
initial
begin
	data_out_2_expected[8] = 1'bX;
end 
// expected data_out_2[ 7 ]
initial
begin
	data_out_2_expected[7] = 1'bX;
end 
// expected data_out_2[ 6 ]
initial
begin
	data_out_2_expected[6] = 1'bX;
end 
// expected data_out_2[ 5 ]
initial
begin
	data_out_2_expected[5] = 1'bX;
end 
// expected data_out_2[ 4 ]
initial
begin
	data_out_2_expected[4] = 1'bX;
end 
// expected data_out_2[ 3 ]
initial
begin
	data_out_2_expected[3] = 1'bX;
end 
// expected data_out_2[ 2 ]
initial
begin
	data_out_2_expected[2] = 1'bX;
end 
// expected data_out_2[ 1 ]
initial
begin
	data_out_2_expected[1] = 1'bX;
end 
// expected data_out_2[ 0 ]
initial
begin
	data_out_2_expected[0] = 1'bX;
end 
// expected data_out_debug[ 31 ]
initial
begin
	data_out_debug_expected[31] = 1'bX;
end 
// expected data_out_debug[ 30 ]
initial
begin
	data_out_debug_expected[30] = 1'bX;
end 
// expected data_out_debug[ 29 ]
initial
begin
	data_out_debug_expected[29] = 1'bX;
end 
// expected data_out_debug[ 28 ]
initial
begin
	data_out_debug_expected[28] = 1'bX;
end 
// expected data_out_debug[ 27 ]
initial
begin
	data_out_debug_expected[27] = 1'bX;
end 
// expected data_out_debug[ 26 ]
initial
begin
	data_out_debug_expected[26] = 1'bX;
end 
// expected data_out_debug[ 25 ]
initial
begin
	data_out_debug_expected[25] = 1'bX;
end 
// expected data_out_debug[ 24 ]
initial
begin
	data_out_debug_expected[24] = 1'bX;
end 
// expected data_out_debug[ 23 ]
initial
begin
	data_out_debug_expected[23] = 1'bX;
end 
// expected data_out_debug[ 22 ]
initial
begin
	data_out_debug_expected[22] = 1'bX;
end 
// expected data_out_debug[ 21 ]
initial
begin
	data_out_debug_expected[21] = 1'bX;
end 
// expected data_out_debug[ 20 ]
initial
begin
	data_out_debug_expected[20] = 1'bX;
end 
// expected data_out_debug[ 19 ]
initial
begin
	data_out_debug_expected[19] = 1'bX;
end 
// expected data_out_debug[ 18 ]
initial
begin
	data_out_debug_expected[18] = 1'bX;
end 
// expected data_out_debug[ 17 ]
initial
begin
	data_out_debug_expected[17] = 1'bX;
end 
// expected data_out_debug[ 16 ]
initial
begin
	data_out_debug_expected[16] = 1'bX;
end 
// expected data_out_debug[ 15 ]
initial
begin
	data_out_debug_expected[15] = 1'bX;
end 
// expected data_out_debug[ 14 ]
initial
begin
	data_out_debug_expected[14] = 1'bX;
end 
// expected data_out_debug[ 13 ]
initial
begin
	data_out_debug_expected[13] = 1'bX;
end 
// expected data_out_debug[ 12 ]
initial
begin
	data_out_debug_expected[12] = 1'bX;
end 
// expected data_out_debug[ 11 ]
initial
begin
	data_out_debug_expected[11] = 1'bX;
end 
// expected data_out_debug[ 10 ]
initial
begin
	data_out_debug_expected[10] = 1'bX;
end 
// expected data_out_debug[ 9 ]
initial
begin
	data_out_debug_expected[9] = 1'bX;
end 
// expected data_out_debug[ 8 ]
initial
begin
	data_out_debug_expected[8] = 1'bX;
end 
// expected data_out_debug[ 7 ]
initial
begin
	data_out_debug_expected[7] = 1'bX;
end 
// expected data_out_debug[ 6 ]
initial
begin
	data_out_debug_expected[6] = 1'bX;
end 
// expected data_out_debug[ 5 ]
initial
begin
	data_out_debug_expected[5] = 1'bX;
end 
// expected data_out_debug[ 4 ]
initial
begin
	data_out_debug_expected[4] = 1'bX;
end 
// expected data_out_debug[ 3 ]
initial
begin
	data_out_debug_expected[3] = 1'bX;
end 
// expected data_out_debug[ 2 ]
initial
begin
	data_out_debug_expected[2] = 1'bX;
end 
// expected data_out_debug[ 1 ]
initial
begin
	data_out_debug_expected[1] = 1'bX;
end 
// expected data_out_debug[ 0 ]
initial
begin
	data_out_debug_expected[0] = 1'bX;
end 
// generate trigger
always @(data_out_1_expected or data_out_1 or data_out_2_expected or data_out_2 or data_out_debug_expected or data_out_debug)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out_1 = %b | expected data_out_2 = %b | expected data_out_debug = %b | ",data_out_1_expected_prev,data_out_2_expected_prev,data_out_debug_expected_prev);
	$display("| real data_out_1 = %b | real data_out_2 = %b | real data_out_debug = %b | ",data_out_1_prev,data_out_2_prev,data_out_debug_prev);
`endif
	if (
		( data_out_1_expected_prev[0] !== 1'bx ) && ( data_out_1_prev[0] !== data_out_1_expected_prev[0] )
		&& ((data_out_1_expected_prev[0] !== last_data_out_1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[0] = data_out_1_expected_prev[0];
	end
	if (
		( data_out_1_expected_prev[1] !== 1'bx ) && ( data_out_1_prev[1] !== data_out_1_expected_prev[1] )
		&& ((data_out_1_expected_prev[1] !== last_data_out_1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[1] = data_out_1_expected_prev[1];
	end
	if (
		( data_out_1_expected_prev[2] !== 1'bx ) && ( data_out_1_prev[2] !== data_out_1_expected_prev[2] )
		&& ((data_out_1_expected_prev[2] !== last_data_out_1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[2] = data_out_1_expected_prev[2];
	end
	if (
		( data_out_1_expected_prev[3] !== 1'bx ) && ( data_out_1_prev[3] !== data_out_1_expected_prev[3] )
		&& ((data_out_1_expected_prev[3] !== last_data_out_1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[3] = data_out_1_expected_prev[3];
	end
	if (
		( data_out_1_expected_prev[4] !== 1'bx ) && ( data_out_1_prev[4] !== data_out_1_expected_prev[4] )
		&& ((data_out_1_expected_prev[4] !== last_data_out_1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[4] = data_out_1_expected_prev[4];
	end
	if (
		( data_out_1_expected_prev[5] !== 1'bx ) && ( data_out_1_prev[5] !== data_out_1_expected_prev[5] )
		&& ((data_out_1_expected_prev[5] !== last_data_out_1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[5] = data_out_1_expected_prev[5];
	end
	if (
		( data_out_1_expected_prev[6] !== 1'bx ) && ( data_out_1_prev[6] !== data_out_1_expected_prev[6] )
		&& ((data_out_1_expected_prev[6] !== last_data_out_1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[6] = data_out_1_expected_prev[6];
	end
	if (
		( data_out_1_expected_prev[7] !== 1'bx ) && ( data_out_1_prev[7] !== data_out_1_expected_prev[7] )
		&& ((data_out_1_expected_prev[7] !== last_data_out_1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[7] = data_out_1_expected_prev[7];
	end
	if (
		( data_out_1_expected_prev[8] !== 1'bx ) && ( data_out_1_prev[8] !== data_out_1_expected_prev[8] )
		&& ((data_out_1_expected_prev[8] !== last_data_out_1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[8] = data_out_1_expected_prev[8];
	end
	if (
		( data_out_1_expected_prev[9] !== 1'bx ) && ( data_out_1_prev[9] !== data_out_1_expected_prev[9] )
		&& ((data_out_1_expected_prev[9] !== last_data_out_1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[9] = data_out_1_expected_prev[9];
	end
	if (
		( data_out_1_expected_prev[10] !== 1'bx ) && ( data_out_1_prev[10] !== data_out_1_expected_prev[10] )
		&& ((data_out_1_expected_prev[10] !== last_data_out_1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[10] = data_out_1_expected_prev[10];
	end
	if (
		( data_out_1_expected_prev[11] !== 1'bx ) && ( data_out_1_prev[11] !== data_out_1_expected_prev[11] )
		&& ((data_out_1_expected_prev[11] !== last_data_out_1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[11] = data_out_1_expected_prev[11];
	end
	if (
		( data_out_1_expected_prev[12] !== 1'bx ) && ( data_out_1_prev[12] !== data_out_1_expected_prev[12] )
		&& ((data_out_1_expected_prev[12] !== last_data_out_1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[12] = data_out_1_expected_prev[12];
	end
	if (
		( data_out_1_expected_prev[13] !== 1'bx ) && ( data_out_1_prev[13] !== data_out_1_expected_prev[13] )
		&& ((data_out_1_expected_prev[13] !== last_data_out_1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[13] = data_out_1_expected_prev[13];
	end
	if (
		( data_out_1_expected_prev[14] !== 1'bx ) && ( data_out_1_prev[14] !== data_out_1_expected_prev[14] )
		&& ((data_out_1_expected_prev[14] !== last_data_out_1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[14] = data_out_1_expected_prev[14];
	end
	if (
		( data_out_1_expected_prev[15] !== 1'bx ) && ( data_out_1_prev[15] !== data_out_1_expected_prev[15] )
		&& ((data_out_1_expected_prev[15] !== last_data_out_1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[15] = data_out_1_expected_prev[15];
	end
	if (
		( data_out_1_expected_prev[16] !== 1'bx ) && ( data_out_1_prev[16] !== data_out_1_expected_prev[16] )
		&& ((data_out_1_expected_prev[16] !== last_data_out_1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[16] = data_out_1_expected_prev[16];
	end
	if (
		( data_out_1_expected_prev[17] !== 1'bx ) && ( data_out_1_prev[17] !== data_out_1_expected_prev[17] )
		&& ((data_out_1_expected_prev[17] !== last_data_out_1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[17] = data_out_1_expected_prev[17];
	end
	if (
		( data_out_1_expected_prev[18] !== 1'bx ) && ( data_out_1_prev[18] !== data_out_1_expected_prev[18] )
		&& ((data_out_1_expected_prev[18] !== last_data_out_1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[18] = data_out_1_expected_prev[18];
	end
	if (
		( data_out_1_expected_prev[19] !== 1'bx ) && ( data_out_1_prev[19] !== data_out_1_expected_prev[19] )
		&& ((data_out_1_expected_prev[19] !== last_data_out_1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[19] = data_out_1_expected_prev[19];
	end
	if (
		( data_out_1_expected_prev[20] !== 1'bx ) && ( data_out_1_prev[20] !== data_out_1_expected_prev[20] )
		&& ((data_out_1_expected_prev[20] !== last_data_out_1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[20] = data_out_1_expected_prev[20];
	end
	if (
		( data_out_1_expected_prev[21] !== 1'bx ) && ( data_out_1_prev[21] !== data_out_1_expected_prev[21] )
		&& ((data_out_1_expected_prev[21] !== last_data_out_1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[21] = data_out_1_expected_prev[21];
	end
	if (
		( data_out_1_expected_prev[22] !== 1'bx ) && ( data_out_1_prev[22] !== data_out_1_expected_prev[22] )
		&& ((data_out_1_expected_prev[22] !== last_data_out_1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[22] = data_out_1_expected_prev[22];
	end
	if (
		( data_out_1_expected_prev[23] !== 1'bx ) && ( data_out_1_prev[23] !== data_out_1_expected_prev[23] )
		&& ((data_out_1_expected_prev[23] !== last_data_out_1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[23] = data_out_1_expected_prev[23];
	end
	if (
		( data_out_1_expected_prev[24] !== 1'bx ) && ( data_out_1_prev[24] !== data_out_1_expected_prev[24] )
		&& ((data_out_1_expected_prev[24] !== last_data_out_1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[24] = data_out_1_expected_prev[24];
	end
	if (
		( data_out_1_expected_prev[25] !== 1'bx ) && ( data_out_1_prev[25] !== data_out_1_expected_prev[25] )
		&& ((data_out_1_expected_prev[25] !== last_data_out_1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[25] = data_out_1_expected_prev[25];
	end
	if (
		( data_out_1_expected_prev[26] !== 1'bx ) && ( data_out_1_prev[26] !== data_out_1_expected_prev[26] )
		&& ((data_out_1_expected_prev[26] !== last_data_out_1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[26] = data_out_1_expected_prev[26];
	end
	if (
		( data_out_1_expected_prev[27] !== 1'bx ) && ( data_out_1_prev[27] !== data_out_1_expected_prev[27] )
		&& ((data_out_1_expected_prev[27] !== last_data_out_1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[27] = data_out_1_expected_prev[27];
	end
	if (
		( data_out_1_expected_prev[28] !== 1'bx ) && ( data_out_1_prev[28] !== data_out_1_expected_prev[28] )
		&& ((data_out_1_expected_prev[28] !== last_data_out_1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[28] = data_out_1_expected_prev[28];
	end
	if (
		( data_out_1_expected_prev[29] !== 1'bx ) && ( data_out_1_prev[29] !== data_out_1_expected_prev[29] )
		&& ((data_out_1_expected_prev[29] !== last_data_out_1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[29] = data_out_1_expected_prev[29];
	end
	if (
		( data_out_1_expected_prev[30] !== 1'bx ) && ( data_out_1_prev[30] !== data_out_1_expected_prev[30] )
		&& ((data_out_1_expected_prev[30] !== last_data_out_1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[30] = data_out_1_expected_prev[30];
	end
	if (
		( data_out_1_expected_prev[31] !== 1'bx ) && ( data_out_1_prev[31] !== data_out_1_expected_prev[31] )
		&& ((data_out_1_expected_prev[31] !== last_data_out_1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_1_expected_prev);
		$display ("     Real value = %b", data_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_1_exp[31] = data_out_1_expected_prev[31];
	end
	if (
		( data_out_2_expected_prev[0] !== 1'bx ) && ( data_out_2_prev[0] !== data_out_2_expected_prev[0] )
		&& ((data_out_2_expected_prev[0] !== last_data_out_2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[0] = data_out_2_expected_prev[0];
	end
	if (
		( data_out_2_expected_prev[1] !== 1'bx ) && ( data_out_2_prev[1] !== data_out_2_expected_prev[1] )
		&& ((data_out_2_expected_prev[1] !== last_data_out_2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[1] = data_out_2_expected_prev[1];
	end
	if (
		( data_out_2_expected_prev[2] !== 1'bx ) && ( data_out_2_prev[2] !== data_out_2_expected_prev[2] )
		&& ((data_out_2_expected_prev[2] !== last_data_out_2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[2] = data_out_2_expected_prev[2];
	end
	if (
		( data_out_2_expected_prev[3] !== 1'bx ) && ( data_out_2_prev[3] !== data_out_2_expected_prev[3] )
		&& ((data_out_2_expected_prev[3] !== last_data_out_2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[3] = data_out_2_expected_prev[3];
	end
	if (
		( data_out_2_expected_prev[4] !== 1'bx ) && ( data_out_2_prev[4] !== data_out_2_expected_prev[4] )
		&& ((data_out_2_expected_prev[4] !== last_data_out_2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[4] = data_out_2_expected_prev[4];
	end
	if (
		( data_out_2_expected_prev[5] !== 1'bx ) && ( data_out_2_prev[5] !== data_out_2_expected_prev[5] )
		&& ((data_out_2_expected_prev[5] !== last_data_out_2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[5] = data_out_2_expected_prev[5];
	end
	if (
		( data_out_2_expected_prev[6] !== 1'bx ) && ( data_out_2_prev[6] !== data_out_2_expected_prev[6] )
		&& ((data_out_2_expected_prev[6] !== last_data_out_2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[6] = data_out_2_expected_prev[6];
	end
	if (
		( data_out_2_expected_prev[7] !== 1'bx ) && ( data_out_2_prev[7] !== data_out_2_expected_prev[7] )
		&& ((data_out_2_expected_prev[7] !== last_data_out_2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[7] = data_out_2_expected_prev[7];
	end
	if (
		( data_out_2_expected_prev[8] !== 1'bx ) && ( data_out_2_prev[8] !== data_out_2_expected_prev[8] )
		&& ((data_out_2_expected_prev[8] !== last_data_out_2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[8] = data_out_2_expected_prev[8];
	end
	if (
		( data_out_2_expected_prev[9] !== 1'bx ) && ( data_out_2_prev[9] !== data_out_2_expected_prev[9] )
		&& ((data_out_2_expected_prev[9] !== last_data_out_2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[9] = data_out_2_expected_prev[9];
	end
	if (
		( data_out_2_expected_prev[10] !== 1'bx ) && ( data_out_2_prev[10] !== data_out_2_expected_prev[10] )
		&& ((data_out_2_expected_prev[10] !== last_data_out_2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[10] = data_out_2_expected_prev[10];
	end
	if (
		( data_out_2_expected_prev[11] !== 1'bx ) && ( data_out_2_prev[11] !== data_out_2_expected_prev[11] )
		&& ((data_out_2_expected_prev[11] !== last_data_out_2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[11] = data_out_2_expected_prev[11];
	end
	if (
		( data_out_2_expected_prev[12] !== 1'bx ) && ( data_out_2_prev[12] !== data_out_2_expected_prev[12] )
		&& ((data_out_2_expected_prev[12] !== last_data_out_2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[12] = data_out_2_expected_prev[12];
	end
	if (
		( data_out_2_expected_prev[13] !== 1'bx ) && ( data_out_2_prev[13] !== data_out_2_expected_prev[13] )
		&& ((data_out_2_expected_prev[13] !== last_data_out_2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[13] = data_out_2_expected_prev[13];
	end
	if (
		( data_out_2_expected_prev[14] !== 1'bx ) && ( data_out_2_prev[14] !== data_out_2_expected_prev[14] )
		&& ((data_out_2_expected_prev[14] !== last_data_out_2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[14] = data_out_2_expected_prev[14];
	end
	if (
		( data_out_2_expected_prev[15] !== 1'bx ) && ( data_out_2_prev[15] !== data_out_2_expected_prev[15] )
		&& ((data_out_2_expected_prev[15] !== last_data_out_2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[15] = data_out_2_expected_prev[15];
	end
	if (
		( data_out_2_expected_prev[16] !== 1'bx ) && ( data_out_2_prev[16] !== data_out_2_expected_prev[16] )
		&& ((data_out_2_expected_prev[16] !== last_data_out_2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[16] = data_out_2_expected_prev[16];
	end
	if (
		( data_out_2_expected_prev[17] !== 1'bx ) && ( data_out_2_prev[17] !== data_out_2_expected_prev[17] )
		&& ((data_out_2_expected_prev[17] !== last_data_out_2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[17] = data_out_2_expected_prev[17];
	end
	if (
		( data_out_2_expected_prev[18] !== 1'bx ) && ( data_out_2_prev[18] !== data_out_2_expected_prev[18] )
		&& ((data_out_2_expected_prev[18] !== last_data_out_2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[18] = data_out_2_expected_prev[18];
	end
	if (
		( data_out_2_expected_prev[19] !== 1'bx ) && ( data_out_2_prev[19] !== data_out_2_expected_prev[19] )
		&& ((data_out_2_expected_prev[19] !== last_data_out_2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[19] = data_out_2_expected_prev[19];
	end
	if (
		( data_out_2_expected_prev[20] !== 1'bx ) && ( data_out_2_prev[20] !== data_out_2_expected_prev[20] )
		&& ((data_out_2_expected_prev[20] !== last_data_out_2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[20] = data_out_2_expected_prev[20];
	end
	if (
		( data_out_2_expected_prev[21] !== 1'bx ) && ( data_out_2_prev[21] !== data_out_2_expected_prev[21] )
		&& ((data_out_2_expected_prev[21] !== last_data_out_2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[21] = data_out_2_expected_prev[21];
	end
	if (
		( data_out_2_expected_prev[22] !== 1'bx ) && ( data_out_2_prev[22] !== data_out_2_expected_prev[22] )
		&& ((data_out_2_expected_prev[22] !== last_data_out_2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[22] = data_out_2_expected_prev[22];
	end
	if (
		( data_out_2_expected_prev[23] !== 1'bx ) && ( data_out_2_prev[23] !== data_out_2_expected_prev[23] )
		&& ((data_out_2_expected_prev[23] !== last_data_out_2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[23] = data_out_2_expected_prev[23];
	end
	if (
		( data_out_2_expected_prev[24] !== 1'bx ) && ( data_out_2_prev[24] !== data_out_2_expected_prev[24] )
		&& ((data_out_2_expected_prev[24] !== last_data_out_2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[24] = data_out_2_expected_prev[24];
	end
	if (
		( data_out_2_expected_prev[25] !== 1'bx ) && ( data_out_2_prev[25] !== data_out_2_expected_prev[25] )
		&& ((data_out_2_expected_prev[25] !== last_data_out_2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[25] = data_out_2_expected_prev[25];
	end
	if (
		( data_out_2_expected_prev[26] !== 1'bx ) && ( data_out_2_prev[26] !== data_out_2_expected_prev[26] )
		&& ((data_out_2_expected_prev[26] !== last_data_out_2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[26] = data_out_2_expected_prev[26];
	end
	if (
		( data_out_2_expected_prev[27] !== 1'bx ) && ( data_out_2_prev[27] !== data_out_2_expected_prev[27] )
		&& ((data_out_2_expected_prev[27] !== last_data_out_2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[27] = data_out_2_expected_prev[27];
	end
	if (
		( data_out_2_expected_prev[28] !== 1'bx ) && ( data_out_2_prev[28] !== data_out_2_expected_prev[28] )
		&& ((data_out_2_expected_prev[28] !== last_data_out_2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[28] = data_out_2_expected_prev[28];
	end
	if (
		( data_out_2_expected_prev[29] !== 1'bx ) && ( data_out_2_prev[29] !== data_out_2_expected_prev[29] )
		&& ((data_out_2_expected_prev[29] !== last_data_out_2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[29] = data_out_2_expected_prev[29];
	end
	if (
		( data_out_2_expected_prev[30] !== 1'bx ) && ( data_out_2_prev[30] !== data_out_2_expected_prev[30] )
		&& ((data_out_2_expected_prev[30] !== last_data_out_2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[30] = data_out_2_expected_prev[30];
	end
	if (
		( data_out_2_expected_prev[31] !== 1'bx ) && ( data_out_2_prev[31] !== data_out_2_expected_prev[31] )
		&& ((data_out_2_expected_prev[31] !== last_data_out_2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_2_expected_prev);
		$display ("     Real value = %b", data_out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_2_exp[31] = data_out_2_expected_prev[31];
	end
	if (
		( data_out_debug_expected_prev[0] !== 1'bx ) && ( data_out_debug_prev[0] !== data_out_debug_expected_prev[0] )
		&& ((data_out_debug_expected_prev[0] !== last_data_out_debug_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[0] = data_out_debug_expected_prev[0];
	end
	if (
		( data_out_debug_expected_prev[1] !== 1'bx ) && ( data_out_debug_prev[1] !== data_out_debug_expected_prev[1] )
		&& ((data_out_debug_expected_prev[1] !== last_data_out_debug_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[1] = data_out_debug_expected_prev[1];
	end
	if (
		( data_out_debug_expected_prev[2] !== 1'bx ) && ( data_out_debug_prev[2] !== data_out_debug_expected_prev[2] )
		&& ((data_out_debug_expected_prev[2] !== last_data_out_debug_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[2] = data_out_debug_expected_prev[2];
	end
	if (
		( data_out_debug_expected_prev[3] !== 1'bx ) && ( data_out_debug_prev[3] !== data_out_debug_expected_prev[3] )
		&& ((data_out_debug_expected_prev[3] !== last_data_out_debug_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[3] = data_out_debug_expected_prev[3];
	end
	if (
		( data_out_debug_expected_prev[4] !== 1'bx ) && ( data_out_debug_prev[4] !== data_out_debug_expected_prev[4] )
		&& ((data_out_debug_expected_prev[4] !== last_data_out_debug_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[4] = data_out_debug_expected_prev[4];
	end
	if (
		( data_out_debug_expected_prev[5] !== 1'bx ) && ( data_out_debug_prev[5] !== data_out_debug_expected_prev[5] )
		&& ((data_out_debug_expected_prev[5] !== last_data_out_debug_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[5] = data_out_debug_expected_prev[5];
	end
	if (
		( data_out_debug_expected_prev[6] !== 1'bx ) && ( data_out_debug_prev[6] !== data_out_debug_expected_prev[6] )
		&& ((data_out_debug_expected_prev[6] !== last_data_out_debug_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[6] = data_out_debug_expected_prev[6];
	end
	if (
		( data_out_debug_expected_prev[7] !== 1'bx ) && ( data_out_debug_prev[7] !== data_out_debug_expected_prev[7] )
		&& ((data_out_debug_expected_prev[7] !== last_data_out_debug_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[7] = data_out_debug_expected_prev[7];
	end
	if (
		( data_out_debug_expected_prev[8] !== 1'bx ) && ( data_out_debug_prev[8] !== data_out_debug_expected_prev[8] )
		&& ((data_out_debug_expected_prev[8] !== last_data_out_debug_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[8] = data_out_debug_expected_prev[8];
	end
	if (
		( data_out_debug_expected_prev[9] !== 1'bx ) && ( data_out_debug_prev[9] !== data_out_debug_expected_prev[9] )
		&& ((data_out_debug_expected_prev[9] !== last_data_out_debug_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[9] = data_out_debug_expected_prev[9];
	end
	if (
		( data_out_debug_expected_prev[10] !== 1'bx ) && ( data_out_debug_prev[10] !== data_out_debug_expected_prev[10] )
		&& ((data_out_debug_expected_prev[10] !== last_data_out_debug_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[10] = data_out_debug_expected_prev[10];
	end
	if (
		( data_out_debug_expected_prev[11] !== 1'bx ) && ( data_out_debug_prev[11] !== data_out_debug_expected_prev[11] )
		&& ((data_out_debug_expected_prev[11] !== last_data_out_debug_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[11] = data_out_debug_expected_prev[11];
	end
	if (
		( data_out_debug_expected_prev[12] !== 1'bx ) && ( data_out_debug_prev[12] !== data_out_debug_expected_prev[12] )
		&& ((data_out_debug_expected_prev[12] !== last_data_out_debug_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[12] = data_out_debug_expected_prev[12];
	end
	if (
		( data_out_debug_expected_prev[13] !== 1'bx ) && ( data_out_debug_prev[13] !== data_out_debug_expected_prev[13] )
		&& ((data_out_debug_expected_prev[13] !== last_data_out_debug_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[13] = data_out_debug_expected_prev[13];
	end
	if (
		( data_out_debug_expected_prev[14] !== 1'bx ) && ( data_out_debug_prev[14] !== data_out_debug_expected_prev[14] )
		&& ((data_out_debug_expected_prev[14] !== last_data_out_debug_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[14] = data_out_debug_expected_prev[14];
	end
	if (
		( data_out_debug_expected_prev[15] !== 1'bx ) && ( data_out_debug_prev[15] !== data_out_debug_expected_prev[15] )
		&& ((data_out_debug_expected_prev[15] !== last_data_out_debug_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[15] = data_out_debug_expected_prev[15];
	end
	if (
		( data_out_debug_expected_prev[16] !== 1'bx ) && ( data_out_debug_prev[16] !== data_out_debug_expected_prev[16] )
		&& ((data_out_debug_expected_prev[16] !== last_data_out_debug_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[16] = data_out_debug_expected_prev[16];
	end
	if (
		( data_out_debug_expected_prev[17] !== 1'bx ) && ( data_out_debug_prev[17] !== data_out_debug_expected_prev[17] )
		&& ((data_out_debug_expected_prev[17] !== last_data_out_debug_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[17] = data_out_debug_expected_prev[17];
	end
	if (
		( data_out_debug_expected_prev[18] !== 1'bx ) && ( data_out_debug_prev[18] !== data_out_debug_expected_prev[18] )
		&& ((data_out_debug_expected_prev[18] !== last_data_out_debug_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[18] = data_out_debug_expected_prev[18];
	end
	if (
		( data_out_debug_expected_prev[19] !== 1'bx ) && ( data_out_debug_prev[19] !== data_out_debug_expected_prev[19] )
		&& ((data_out_debug_expected_prev[19] !== last_data_out_debug_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[19] = data_out_debug_expected_prev[19];
	end
	if (
		( data_out_debug_expected_prev[20] !== 1'bx ) && ( data_out_debug_prev[20] !== data_out_debug_expected_prev[20] )
		&& ((data_out_debug_expected_prev[20] !== last_data_out_debug_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[20] = data_out_debug_expected_prev[20];
	end
	if (
		( data_out_debug_expected_prev[21] !== 1'bx ) && ( data_out_debug_prev[21] !== data_out_debug_expected_prev[21] )
		&& ((data_out_debug_expected_prev[21] !== last_data_out_debug_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[21] = data_out_debug_expected_prev[21];
	end
	if (
		( data_out_debug_expected_prev[22] !== 1'bx ) && ( data_out_debug_prev[22] !== data_out_debug_expected_prev[22] )
		&& ((data_out_debug_expected_prev[22] !== last_data_out_debug_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[22] = data_out_debug_expected_prev[22];
	end
	if (
		( data_out_debug_expected_prev[23] !== 1'bx ) && ( data_out_debug_prev[23] !== data_out_debug_expected_prev[23] )
		&& ((data_out_debug_expected_prev[23] !== last_data_out_debug_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[23] = data_out_debug_expected_prev[23];
	end
	if (
		( data_out_debug_expected_prev[24] !== 1'bx ) && ( data_out_debug_prev[24] !== data_out_debug_expected_prev[24] )
		&& ((data_out_debug_expected_prev[24] !== last_data_out_debug_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[24] = data_out_debug_expected_prev[24];
	end
	if (
		( data_out_debug_expected_prev[25] !== 1'bx ) && ( data_out_debug_prev[25] !== data_out_debug_expected_prev[25] )
		&& ((data_out_debug_expected_prev[25] !== last_data_out_debug_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[25] = data_out_debug_expected_prev[25];
	end
	if (
		( data_out_debug_expected_prev[26] !== 1'bx ) && ( data_out_debug_prev[26] !== data_out_debug_expected_prev[26] )
		&& ((data_out_debug_expected_prev[26] !== last_data_out_debug_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[26] = data_out_debug_expected_prev[26];
	end
	if (
		( data_out_debug_expected_prev[27] !== 1'bx ) && ( data_out_debug_prev[27] !== data_out_debug_expected_prev[27] )
		&& ((data_out_debug_expected_prev[27] !== last_data_out_debug_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[27] = data_out_debug_expected_prev[27];
	end
	if (
		( data_out_debug_expected_prev[28] !== 1'bx ) && ( data_out_debug_prev[28] !== data_out_debug_expected_prev[28] )
		&& ((data_out_debug_expected_prev[28] !== last_data_out_debug_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[28] = data_out_debug_expected_prev[28];
	end
	if (
		( data_out_debug_expected_prev[29] !== 1'bx ) && ( data_out_debug_prev[29] !== data_out_debug_expected_prev[29] )
		&& ((data_out_debug_expected_prev[29] !== last_data_out_debug_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[29] = data_out_debug_expected_prev[29];
	end
	if (
		( data_out_debug_expected_prev[30] !== 1'bx ) && ( data_out_debug_prev[30] !== data_out_debug_expected_prev[30] )
		&& ((data_out_debug_expected_prev[30] !== last_data_out_debug_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[30] = data_out_debug_expected_prev[30];
	end
	if (
		( data_out_debug_expected_prev[31] !== 1'bx ) && ( data_out_debug_prev[31] !== data_out_debug_expected_prev[31] )
		&& ((data_out_debug_expected_prev[31] !== last_data_out_debug_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_debug[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_debug_expected_prev);
		$display ("     Real value = %b", data_out_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_debug_exp[31] = data_out_debug_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module registerarray_vlg_vec_tst();
// constants                                           
// general purpose registers
reg WriteEnable;
reg clock;
reg clock_debug;
reg [4:0] read_address_1;
reg [4:0] read_address_2;
reg [4:0] read_address_debug;
reg reset;
reg write;
reg [4:0] write_address;
reg [31:0] write_data_in;
// wires                                               
wire [31:0] data_out_1;
wire [31:0] data_out_2;
wire [31:0] data_out_debug;

wire sampler;                             

// assign statements (if any)                          
registerarray i1 (
// port map - connection between master ports and signals/registers   
	.WriteEnable(WriteEnable),
	.clock(clock),
	.clock_debug(clock_debug),
	.data_out_1(data_out_1),
	.data_out_2(data_out_2),
	.data_out_debug(data_out_debug),
	.read_address_1(read_address_1),
	.read_address_2(read_address_2),
	.read_address_debug(read_address_debug),
	.reset(reset),
	.write(write),
	.write_address(write_address),
	.write_data_in(write_data_in)
);

// WriteEnable
initial
begin
	WriteEnable = 1'b1;
	WriteEnable = #300000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// clock_debug
initial
begin
	clock_debug = 1'b0;
end 
// read_address_1[ 4 ]
initial
begin
	read_address_1[4] = 1'b0;
end 
// read_address_1[ 3 ]
initial
begin
	read_address_1[3] = 1'b0;
end 
// read_address_1[ 2 ]
initial
begin
	read_address_1[2] = 1'b0;
	read_address_1[2] = #180000 1'b1;
	read_address_1[2] = #130000 1'b0;
end 
// read_address_1[ 1 ]
initial
begin
	read_address_1[1] = 1'b0;
	read_address_1[1] = #60000 1'b1;
	read_address_1[1] = #120000 1'b0;
end 
// read_address_1[ 0 ]
initial
begin
	read_address_1[0] = 1'b1;
	read_address_1[0] = #60000 1'b0;
	read_address_1[0] = #60000 1'b1;
	read_address_1[0] = #60000 1'b0;
	read_address_1[0] = #70000 1'b1;
	read_address_1[0] = #60000 1'b0;
end 
// read_address_2[ 4 ]
initial
begin
	read_address_2[4] = 1'b0;
end 
// read_address_2[ 3 ]
initial
begin
	read_address_2[3] = 1'b0;
end 
// read_address_2[ 2 ]
initial
begin
	read_address_2[2] = 1'b0;
end 
// read_address_2[ 1 ]
initial
begin
	read_address_2[1] = 1'b0;
end 
// read_address_2[ 0 ]
initial
begin
	read_address_2[0] = 1'b0;
end 
// read_address_debug[ 4 ]
initial
begin
	read_address_debug[4] = 1'b0;
end 
// read_address_debug[ 3 ]
initial
begin
	read_address_debug[3] = 1'b0;
end 
// read_address_debug[ 2 ]
initial
begin
	read_address_debug[2] = 1'b0;
end 
// read_address_debug[ 1 ]
initial
begin
	read_address_debug[1] = 1'b0;
end 
// read_address_debug[ 0 ]
initial
begin
	read_address_debug[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// write
initial
begin
	write = 1'b0;
end 
// write_address[ 4 ]
initial
begin
	write_address[4] = 1'b0;
end 
// write_address[ 3 ]
initial
begin
	write_address[3] = 1'b0;
end 
// write_address[ 2 ]
initial
begin
	write_address[2] = 1'b0;
end 
// write_address[ 1 ]
initial
begin
	write_address[1] = 1'b0;
end 
// write_address[ 0 ]
initial
begin
	write_address[0] = 1'b0;
end 
// write_data_in[ 31 ]
initial
begin
	write_data_in[31] = 1'b0;
end 
// write_data_in[ 30 ]
initial
begin
	write_data_in[30] = 1'b0;
end 
// write_data_in[ 29 ]
initial
begin
	write_data_in[29] = 1'b0;
end 
// write_data_in[ 28 ]
initial
begin
	write_data_in[28] = 1'b0;
end 
// write_data_in[ 27 ]
initial
begin
	write_data_in[27] = 1'b0;
end 
// write_data_in[ 26 ]
initial
begin
	write_data_in[26] = 1'b0;
end 
// write_data_in[ 25 ]
initial
begin
	write_data_in[25] = 1'b0;
end 
// write_data_in[ 24 ]
initial
begin
	write_data_in[24] = 1'b0;
end 
// write_data_in[ 23 ]
initial
begin
	write_data_in[23] = 1'b0;
end 
// write_data_in[ 22 ]
initial
begin
	write_data_in[22] = 1'b0;
end 
// write_data_in[ 21 ]
initial
begin
	write_data_in[21] = 1'b0;
end 
// write_data_in[ 20 ]
initial
begin
	write_data_in[20] = 1'b0;
end 
// write_data_in[ 19 ]
initial
begin
	write_data_in[19] = 1'b0;
end 
// write_data_in[ 18 ]
initial
begin
	write_data_in[18] = 1'b0;
end 
// write_data_in[ 17 ]
initial
begin
	write_data_in[17] = 1'b0;
end 
// write_data_in[ 16 ]
initial
begin
	write_data_in[16] = 1'b0;
end 
// write_data_in[ 15 ]
initial
begin
	write_data_in[15] = 1'b0;
end 
// write_data_in[ 14 ]
initial
begin
	write_data_in[14] = 1'b0;
end 
// write_data_in[ 13 ]
initial
begin
	write_data_in[13] = 1'b0;
end 
// write_data_in[ 12 ]
initial
begin
	write_data_in[12] = 1'b0;
end 
// write_data_in[ 11 ]
initial
begin
	write_data_in[11] = 1'b0;
end 
// write_data_in[ 10 ]
initial
begin
	write_data_in[10] = 1'b0;
end 
// write_data_in[ 9 ]
initial
begin
	write_data_in[9] = 1'b0;
end 
// write_data_in[ 8 ]
initial
begin
	write_data_in[8] = 1'b0;
end 
// write_data_in[ 7 ]
initial
begin
	write_data_in[7] = 1'b0;
end 
// write_data_in[ 6 ]
initial
begin
	write_data_in[6] = 1'b0;
end 
// write_data_in[ 5 ]
initial
begin
	write_data_in[5] = 1'b0;
end 
// write_data_in[ 4 ]
initial
begin
	write_data_in[4] = 1'b0;
end 
// write_data_in[ 3 ]
initial
begin
	write_data_in[3] = 1'b0;
end 
// write_data_in[ 2 ]
initial
begin
	write_data_in[2] = 1'b0;
end 
// write_data_in[ 1 ]
initial
begin
	write_data_in[1] = 1'b0;
end 
// write_data_in[ 0 ]
initial
begin
	write_data_in[0] = 1'b0;
end 

registerarray_vlg_sample_tst tb_sample (
	.WriteEnable(WriteEnable),
	.clock(clock),
	.clock_debug(clock_debug),
	.read_address_1(read_address_1),
	.read_address_2(read_address_2),
	.read_address_debug(read_address_debug),
	.reset(reset),
	.write(write),
	.write_address(write_address),
	.write_data_in(write_data_in),
	.sampler_tx(sampler)
);

registerarray_vlg_check_tst tb_out(
	.data_out_1(data_out_1),
	.data_out_2(data_out_2),
	.data_out_debug(data_out_debug),
	.sampler_rx(sampler)
);
endmodule

